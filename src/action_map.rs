use strum_macros::{Display, EnumString};

use crate::event_exec::EventExec;
use crate::fm_error::FmResult;
use crate::status::Status;

#[derive(Clone, Debug, Display, EnumString)]
pub enum ActionMap {
    Back,
    BackTab,
    Backspace,
    Bulkrename,
    Chmod,
    ClearFlags,
    CopyFilename,
    CopyFilepath,
    CopyPaste,
    CutPaste,
    Delete,
    DeleteFile,
    DisplayFull,
    DragNDrop,
    End,
    Enter,
    Exec,
    Filter,
    FlagAll,
    FuzzyFind,
    Goto,
    Help,
    History,
    Home,
    Jump,
    KeyHome,
    MarksJump,
    MarksNew,
    ModeNormal,
    MoveDown,
    MoveLeft,
    MoveRight,
    MoveUp,
    NewDir,
    NewFile,
    Nothing,
    NvimFilepicker,
    OpenFile,
    PageDown,
    PageUp,
    Preview,
    Quit,
    RefreshView,
    RegexMatch,
    Rename,
    ReverseFlags,
    Search,
    Shell,
    Shortcut,
    Sort,
    Symlink,
    Tab,
    Thumbnail,
    ToggleDualPane,
    ToggleFlag,
    ToggleHidden,
}

impl ActionMap {
    pub fn matcher(&self, status: &mut Status) -> FmResult<()> {
        let current_tab = status.selected();
        match *self {
            ActionMap::Back => EventExec::event_back(current_tab),
            ActionMap::BackTab => EventExec::backtab(status),
            ActionMap::Backspace => EventExec::event_backspace(status),
            ActionMap::Bulkrename => EventExec::event_bulkrename(status),
            ActionMap::Chmod => EventExec::event_chmod(status),
            ActionMap::ClearFlags => EventExec::event_clear_flags(status),
            ActionMap::CopyFilename => EventExec::event_copy_filename(status),
            ActionMap::CopyFilepath => EventExec::event_copy_filepath(status),
            ActionMap::CopyPaste => EventExec::event_copy_paste(current_tab),
            ActionMap::CutPaste => EventExec::event_cut_paste(current_tab),
            ActionMap::Delete => EventExec::event_delete(status),
            ActionMap::DeleteFile => EventExec::event_delete_file(current_tab),
            ActionMap::DisplayFull => EventExec::event_toggle_display_full(status),
            ActionMap::DragNDrop => EventExec::event_drag_n_drop(status),
            ActionMap::End => EventExec::event_end(status),
            ActionMap::Enter => EventExec::enter(status),
            ActionMap::Exec => EventExec::event_exec(current_tab),
            ActionMap::Filter => EventExec::event_filter(current_tab),
            ActionMap::FlagAll => EventExec::event_flag_all(status),
            ActionMap::FuzzyFind => EventExec::event_fuzzyfind(status),
            ActionMap::Goto => EventExec::event_goto(current_tab),
            ActionMap::Help => EventExec::event_help(current_tab),
            ActionMap::History => EventExec::event_history(current_tab),
            ActionMap::Home => EventExec::event_home(current_tab),
            ActionMap::Jump => EventExec::event_jump(status),
            ActionMap::KeyHome => EventExec::event_key_home(status),
            ActionMap::MarksJump => EventExec::event_marks_jump(status),
            ActionMap::MarksNew => EventExec::event_marks_new(status),
            ActionMap::ModeNormal => EventExec::event_normal(current_tab),
            ActionMap::MoveDown => EventExec::event_move_down(status),
            ActionMap::MoveLeft => EventExec::event_move_left(status),
            ActionMap::MoveRight => EventExec::event_move_right(status),
            ActionMap::MoveUp => EventExec::event_move_up(status),
            ActionMap::NewDir => EventExec::event_new_dir(current_tab),
            ActionMap::NewFile => EventExec::event_new_file(current_tab),
            ActionMap::NvimFilepicker => EventExec::event_nvim_filepicker(current_tab),
            ActionMap::OpenFile => EventExec::event_open_file(current_tab),
            ActionMap::PageDown => EventExec::page_down(status),
            ActionMap::PageUp => EventExec::page_up(status),
            ActionMap::Preview => EventExec::event_preview(current_tab),
            ActionMap::Quit => EventExec::event_quit(current_tab),
            ActionMap::RefreshView => EventExec::event_refreshview(status),
            ActionMap::RegexMatch => EventExec::event_regex_match(current_tab),
            ActionMap::Rename => EventExec::event_rename(current_tab),
            ActionMap::ReverseFlags => EventExec::event_reverse_flags(status),
            ActionMap::Search => EventExec::event_search(current_tab),
            ActionMap::Shell => EventExec::event_shell(current_tab),
            ActionMap::Shortcut => EventExec::event_shortcut(current_tab),
            ActionMap::Sort => EventExec::event_sort(current_tab),
            ActionMap::Symlink => EventExec::event_symlink(status),
            ActionMap::Tab => EventExec::tab(status),
            ActionMap::Thumbnail => EventExec::event_thumbnail(current_tab),
            ActionMap::ToggleDualPane => EventExec::event_toggle_dualpane(status),
            ActionMap::ToggleFlag => EventExec::event_toggle_flag(status),
            ActionMap::ToggleHidden => EventExec::event_toggle_hidden(current_tab),

            ActionMap::Nothing => Ok(()),
        }
    }
}
